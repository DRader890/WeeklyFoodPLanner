// <auto-generated />
using System;
using Foodie.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WeeklyFoodPlanner.Migrations
{
    [DbContext(typeof(FoodieDbContext))]
    [Migration("20250122024900_nodays")]
    partial class nodays
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foodie.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cut, season and throw in pan",
                            Name = "Chicken",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Put in boiling water",
                            Name = "Rice",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Put in pan",
                            Name = "Bacon",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Put in pan, season",
                            Name = "Eggs",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Crack eggs, cinnamon, sugar, dip bread and put in pan",
                            Name = "French Toast",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Season and grill",
                            Name = "Steak",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Boil and add sauce",
                            Name = "Pasta",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "Chop and mix vegetables",
                            Name = "Salad",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "Season and bake",
                            Name = "Fish",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "Boil ingredients",
                            Name = "Soup",
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("Foodie.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("MealTimeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealTimeId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Foodie.Models.MealTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("MealTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Breakfast",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lunch",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dinner",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Breakfast",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lunch",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dinner",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Breakfast",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Lunch",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dinner",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Breakfast",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Lunch",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Dinner",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Breakfast",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Lunch",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Dinner",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Breakfast",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Lunch",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "Dinner",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 19,
                            Name = "Breakfast",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 20,
                            Name = "Lunch",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 21,
                            Name = "Dinner",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 22,
                            Name = "Breakfast",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 23,
                            Name = "Lunch",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 24,
                            Name = "Dinner",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 25,
                            Name = "Breakfast",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 26,
                            Name = "Lunch",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 27,
                            Name = "Dinner",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 28,
                            Name = "Breakfast",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 29,
                            Name = "Lunch",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 30,
                            Name = "Dinner",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 31,
                            Name = "Breakfast",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 32,
                            Name = "Lunch",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 33,
                            Name = "Dinner",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 34,
                            Name = "Breakfast",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 35,
                            Name = "Lunch",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 36,
                            Name = "Dinner",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 37,
                            Name = "Breakfast",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 38,
                            Name = "Lunch",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 39,
                            Name = "Dinner",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 40,
                            Name = "Breakfast",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 41,
                            Name = "Lunch",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 42,
                            Name = "Dinner",
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("Foodie.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdentityUserId = "3"
                        },
                        new
                        {
                            Id = 2,
                            IdentityUserId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb0f93e0-caa5-44bf-a1ca-e7a2ac60e81d",
                            Email = "dale@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DALE@GMAIL.COM",
                            NormalizedUserName = "DALE",
                            PasswordHash = "AQAAAAIAAYagAAAAEOQx11MJ879QquMaZpKWixC8zUijS1uYAZniTX5KiY1mlMyZmjaFV2rS7K98v+GYEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9b8e0f0-4c76-4ec7-849a-5597697c1d88",
                            TwoFactorEnabled = false,
                            UserName = "dale"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "183f4fe9-7406-4b26-bb26-e27188e6d42e",
                            Email = "blake@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BLAKE@GMAIL.COM",
                            NormalizedUserName = "BLAKE",
                            PasswordHash = "AQAAAAIAAYagAAAAEBfl3bvlvDSkEj9goL41REsBksUaV9Ze70cA4CM628fb72szVJR3cDv/JGxIEjdopw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c50fb33-8766-4682-8489-f2523139831f",
                            TwoFactorEnabled = false,
                            UserName = "blake"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Foodie.Models.Food", b =>
                {
                    b.HasOne("Foodie.Models.UserProfile", "UserProfile")
                        .WithMany("Foods")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Foodie.Models.Meal", b =>
                {
                    b.HasOne("Foodie.Models.Food", "Food")
                        .WithMany("Meals")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodie.Models.MealTime", "MealTime")
                        .WithMany("Meals")
                        .HasForeignKey("MealTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("MealTime");
                });

            modelBuilder.Entity("Foodie.Models.MealTime", b =>
                {
                    b.HasOne("Foodie.Models.UserProfile", "UserProfile")
                        .WithMany("MealTimes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Foodie.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foodie.Models.Food", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Foodie.Models.MealTime", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Foodie.Models.UserProfile", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("MealTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
